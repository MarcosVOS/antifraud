diff --git a/compose.yml b/compose.yml
index c569282..d6929d5 100644
--- a/compose.yml
+++ b/compose.yml
@@ -23,7 +23,7 @@ services:
   
   app:
     build: .
-    restart: unless-stopped
+    #restart: unless-stopped
     env_file:
       - .env
     ports:
diff --git a/pom.xml b/pom.xml
index d829fe9..12197a0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -32,6 +32,17 @@
 	</properties>
 	<dependencies>
 
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-data-jpa</artifactId>
@@ -73,10 +84,12 @@
 			<scope>test</scope>
 			<version>2.3.232</version>
 		</dependency>
+
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-actuator</artifactId>
 		</dependency>
+
 		<dependency>
 			<groupId>org.mapstruct</groupId>
 			<artifactId>mapstruct</artifactId>
diff --git a/src/main/java/com/bradesco/antifraud/service/CustomerService.java b/src/main/java/com/bradesco/antifraud/service/CustomerService.java
index 970cdc1..fd951d4 100644
--- a/src/main/java/com/bradesco/antifraud/service/CustomerService.java
+++ b/src/main/java/com/bradesco/antifraud/service/CustomerService.java
@@ -5,6 +5,8 @@ import com.bradesco.antifraud.model.Customer;
 import com.bradesco.antifraud.repository.CustomerRepository;
 import jakarta.persistence.EntityNotFoundException;
 import lombok.RequiredArgsConstructor;
+
+import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
@@ -15,6 +17,7 @@ import java.util.UUID;
 public class CustomerService {
 
     private final CustomerRepository repository;
+    private final PasswordEncoder passwordEncoder;
 
     public Customer findById(UUID id) {
         return repository.findById(id)
@@ -29,6 +32,8 @@ public class CustomerService {
             throw new AccountAlreadyExistsException("Email j√° cadastrado: " + customer.getEmail());
         }
 
+        customer.setPassword(passwordEncoder.encode(customer.getPassword()));
+
         return repository.save(customer);
     }
 
@@ -50,7 +55,10 @@ public class CustomerService {
         existing.setEmail(newData.getEmail());
         existing.setPhone(newData.getPhone());
         existing.setAddress(newData.getAddress());
-        existing.setPassword(newData.getPassword());
+
+        if (!newData.getPassword().equals(existing.getPassword())) {
+            existing.setPassword(passwordEncoder.encode(newData.getPassword()));
+        }
 
         return repository.save(existing);
     }
diff --git a/src/test/java/com/bradesco/antifraud/service/CustomerServiceTest.java b/src/test/java/com/bradesco/antifraud/service/CustomerServiceTest.java
index abf898d..73de3f8 100644
--- a/src/test/java/com/bradesco/antifraud/service/CustomerServiceTest.java
+++ b/src/test/java/com/bradesco/antifraud/service/CustomerServiceTest.java
@@ -5,6 +5,7 @@ import com.bradesco.antifraud.repository.CustomerRepository;
 
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
+import org.springframework.security.crypto.password.PasswordEncoder;
 
 import java.util.Optional;
 import java.util.UUID;
@@ -14,8 +15,9 @@ import static org.mockito.Mockito.*;
 
 public class CustomerServiceTest {
 
-    private final CustomerRepository repository = Mockito.mock(CustomerRepository.class);
-    private final CustomerService service = new CustomerService(repository);
+    CustomerRepository repository = Mockito.mock(CustomerRepository.class);
+    PasswordEncoder passwordEncoder = Mockito.mock(PasswordEncoder.class);
+    CustomerService service = new CustomerService(repository, passwordEncoder);
 
     @Test
     void testFindById() {
